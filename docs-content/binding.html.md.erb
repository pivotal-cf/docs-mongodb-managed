---
title: Creating and Binding MongoDB Service Instances
owner: Partners
---

This topic describes how developers create and bind instances of the MongoDB Enterprise Service for VMware Tanzu.

After deploying the MongoDB Enterprise Service for VMware Tanzu tile, the MongoDB Enterprise Service appears in the Marketplace.
Developers can use either the Cloud Foundry Command Line Interface (cf CLI) or
Apps Manager to create an instance of the service and bind it to apps.
Binding instances creates unique credentials for each app to access the database.

##<a id='cf-cli'></a> Create and Bind a Service Instance with the cf CLI

To create and bind an instance of the MongoDB Enterprise Service with the cf CLI, perform the following steps:

1. Set your API endpoint to the Cloud Controller of your deployment.
  <pre class='terminal'>
  $ cf api api.YOUR-SYSTEM-DOMAIN
  Setting api endpoint to api.YOUR-SYSTEM-DOMAIN...
  OK
  API endpoint:  <span>https:</span>//api.YOUR-SYSTEM-DOMAIN (API version: 2.59.0)
  Not logged in. Use 'cf login' to log in.
  </pre>
1. Log in to your deployment and select an org and a space.
  <pre class="terminal">
  $ cf login
  API endpoint: <span>https:</span>//api.YOUR-SYSTEM-DOMAIN
  Email> user<span>@</span>example.com
  Password>
  </pre>
1. List the Marketplace services and locate the MongoDB Enterprise Service.
	<pre class="terminal">
	$ cf marketplace
	Getting services from marketplace in org example / space development as user<span>@</span>example.com...
	OK

	service       plans                                           description
	mongodb-odb  standalone, single_replica_set, sharded_cluster  MongoDB Enterprise Service
	</pre>
1. Create an instance of the MongoDB Enterprise Service.
   Select either the `standalone`, `replica_set`, or `sharded_cluster` service plan.
   The `standalone` plan provides a single node cluster of MongoDB, the `replica_set` plan provides a three-node replica set,
   and the `sharded_cluster` provides a sharded cluster with two shards. 
   For details on different sharded cluster configurations,
   see [Advanced Configuration for MongoDB Versions and Sharded Clusters](#advanced-config).
   The example below uses the `standalone` plan.

	<pre class="terminal">
	$ cf create-service mongodb-odb standalone YOUR-SERVICE-INSTANCE
	Creating service instance YOUR-SERVICE-INSTANCE in org example / space development as user@example.com...
	OK
	</pre>

1. Before binding the app, first check that the service was created by running `cf service INSTANCE_NAME.`
   It will also give you a URL to the MongoDB Ops Manager group that contains the cluster
   so you can jump to MongoDB Ops Manager and manage, monitor, and backup the cluster.
	<pre class="terminal">
	$ cf service YOUR-SERVICE-INSTANCE
	
	Service instance: YOUR-SERVICE-INSTANCE
	Service: mongodb-odb
	Bound apps: 
	Tags: 
	Plan: standalone
	Description: MongoDB Service
	Documentation url: 
	Dashboard: http<span>:</span>//ec2-54-191-73-144.us-west-2.compute.amazonaws.com:8080/v2/595e8e04339ea10b5650eecb

	Last Operation
	Status: create succeeded
	Message: Instance provisioning in progress
	Started: 2017-07-06T19:22:44Z
	Updated: 2017-07-06T19:24:49Z	
	</pre>

1. Bind the instance to an app.
  <pre class="terminal">
  $ cf bind-service YOUR-APP YOUR-SERVICE-INSTANCE
  Binding service YOUR-SERVICE-INSTANCE to app YOUR-APP in org example / space development as user@example.com...
  OK
  TIP: Use 'cf restage YOUR-APP' to ensure your env variable changes take effect
  </pre>
1. Restage the app for the binding to take effect.
  <pre class="terminal">
  $ cf restage YOUR-APP
  </pre>

##<a id='advanced-config'></a> Advanced Configuration for MongoDB Versions and Sharded Clusters

Any plan can be configured to generate any supported version of MongoDB, community and enterprise,
by supplying the `version` configuration parameter to the `create-service` command.
For the MongoDB version, type in the actual version number, and for enterprise, add `-ent` at the end.
For example:
	<pre class="terminal">
	$ cf create-service mongodb-odb standalone my-db -c '{"version": "3.4.5-ent"}' </pre>

For a sharded cluster, the following configuration parameters can be supplied to determine the topology of the cluster to be provisioned:

* `shards`: determines the number of shards
* `replicas`: determines the number of replicas in each shard
* `config_servers`: determines the number of config servers
* `mongos`: determines the number of mongos'

The following example provisions a MongoDB sharded cluster with 3 shards,
3-node replica sets in each shard, 3 config servers, and 2 mongos processes:
	<pre class="terminal">
	$ cf create-service mongodb-odb sharded\_cluster my-sharded-db -c '{"shards": 3, "replicas": 3, "config\_servers": 3, "mongos": 2}' </pre>

##<a id='apps-man'></a> Create and Bind a Service Instance in Apps Manager

To create and bind an instance of the MongoDB Enterprise Service in Apps Manager, do the following:

1. Navigate to `apps.YOUR-SYSTEM-DOMAIN` in a browser and log in.
1. Click **Marketplace** in the left navigation.
1. Click **MongoDB Enterprise Service**.
1. Select either the `standalone`, `replica_set`, or `sharded_cluster` service plan.
   The `standalone` plan provides a single node cluster of MongoDB,
   the `replica_set` plan provides a three-node cluster,
   and the `sharded_cluster` provides a sharded cluster with 2 shards by default (see above for different configurations). 
1. Enter an **Instance Name** and select a space under **Add to Space**.
   To bind the service instance to an app, select an app under **Bind to App**.
1. Click **Add**.
  You can also bind an app to a service instance by navigating to the app page,
  clicking **Services**, then clicking **Bind a Service**. 
1. Select a service instance to bind to the app and click **Bind**.

<p class="note warning"><strong> NOTE:</strong>
The connection string generated during the bind operation is only
an example. For example, it will default to connecting to the `test` 
database, likely not the desired target. You should properly build
your MongoDB connection string from the bind information. 
</p>


##<a id='arbitrary-params'></a>Service Instance Creation Parameter Reference

This section provides a complete reference for all the
parameters available when creating instances of a MongoDB service
on VMware Tanzu.

* `projectName` String - Set the name of the project in MongoDB Ops Manager
to generate for this cluster.
<p class='note'><strong>Note:</strong> The name 
of the service provisioned in VMware Tanzu currently does not carry over into
MongoDB Ops Manager. Always set this
parameter the same as your VMware Tanzu Service name. For example:
	<pre class="terminal">
	cf create-service mongodb-odb replica_set_small DemoDB123 \
	-c '{ "projectName" : "DemoDB123", "orgId" : "5aa28bee1e6d9669e4c56a5b" }'
	</pre></p>

* `orgId` String - Unique Identifier - Set the organization ID 
in which to generate a project
for this cluster in MongoDB Ops Manager.


* `version` - String - Control which version of MongoDB to run in 
the target cluster.

* `replicas` - Integer - How many nodes in the target MongoDB
replica Set.

* `shards` - Integer - Determines how many shards to deploy
in the target sharded cluster.

* `config_servers` - Integer - Sets how many config servers to
deploy in the target cluster.

* `mongos` - Integer - Determines the number of mongos processes
to start in a sharded cluster.
